@model OrganWeb.Areas.Sistema.Models.Item

<script type="text/javascript" language=javascript>
    $.validator.unobtrusive.parse(document);
</script>


<form asp-action="_NovoItem" asp-controller="Estoque" method="post" data-ajax="true" data-ajax-update="Modal-lightbox">
    @*using (Ajax.BeginForm("_NovoItem", "Estoque", new AjaxOptions { OnSuccess = "handleSuccess" }))*@
    @Html.AntiForgeryToken()
    <div class="modal fade" id="Modal-lightbox" tabindex="-1" role="dialog" data-backdrop="static">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-body">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>

                    <h6 class="card-title box-title"><i class="icofont icofont-plant"></i>Novo item</h6>

                    <div class="form-group row">
                        <label class="col-sm-8 col-form">@Html.LabelFor(model => model.Nome, new { htmlAttributes = new { @class = "form-control" } })</label>
                        <div class="col-sm-8">
                            @Html.EditorFor(model => model.Nome, new { htmlAttributes = new { @class = "form-control", @placeholder = "Nome" } })
                            @Html.ValidationMessageFor(modelItem => modelItem.Nome, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group row">
                        <label class="col-sm-8 col-form">@Html.LabelFor(model => model.Descricao, new { htmlAttributes = new { @class = "form-control" } })</label>
                        <div class="col-sm-8">
                            @Html.EditorFor(model => model.Descricao, new { htmlAttributes = new { @class = "form-control", @placeholder = "Descrição" } })
                            @Html.ValidationMessageFor(modelItem => modelItem.Descricao, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group row">
                        <label class="col-sm-8 col-form">@Html.LabelFor(model => model.ValorUnit, new { htmlAttributes = new { @class = "form-control" } })</label>
                        <div class="col-sm-8">
                            @Html.EditorFor(model => model.ValorUnit, new { htmlAttributes = new { @class = "form-control", @placeholder = "Valor unitário" } })
                            @Html.ValidationMessageFor(modelItem => modelItem.ValorUnit, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group row">
                        <label class="col-sm-8 col-form">@Html.LabelFor(model => model.Estoque.Quantidade, new { htmlAttributes = new { @class = "form-control" } })</label>
                        <div class="col-sm-8">
                            @Html.EditorFor(model => model.Estoque.Quantidade, new { htmlAttributes = new { @class = "form-control", @placeholder = "Quantidade" } })
                            @Html.ValidationMessageFor(modelItem => modelItem.Estoque.Quantidade, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group row">
                        <label class="col-sm-8 col-form">@Html.LabelFor(model => model.Estoque.UnidadeMedida, new { htmlAttributes = new { @class = "form-control" } })</label>
                        <div class="col-sm-8">
                            @Html.EditorFor(model => model.Estoque.UnidadeMedida, new { htmlAttributes = new { @class = "form-control", @placeholder = "Unidade de medida" } })
                            @Html.ValidationMessageFor(modelItem => modelItem.Estoque.UnidadeMedida, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="input-group mb-3">
                        @Html.DropDownListFor(model => model.IdFornecedor, new SelectList(Model.Fornecedors, "Id", "Nome", Model.IdFornecedor), "Selecionar fornecedor")
                        <div class="input-group-append">
                            <button class="btn btn-outline-secondary" type="button">Novo</button>
                        </div>
                        @Html.ValidationMessageFor(modelItem => modelItem.IdFornecedor, "", new { @class = "text-danger" })
                    </div>

                    <div class="input-group mb-3">
                        @Html.DropDownListFor(model => model.IdCategoria, new SelectList(Model.Categorias, "Id", "Nome", Model.IdCategoria), "Selecionar categoria")
                        <div class="input-group-append">
                            <button class="btn btn-outline-secondary" type="button">Novo</button>
                        </div>
                        @Html.ValidationMessageFor(modelItem => modelItem.IdCategoria, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group row">
                        <label class="col-sm-7"></label>
                        <div class="col-sm-10">
                            <button type="submit" class="btn btn-success m-b-0">Adicionar</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</form>


<!--<script>
    $(document).ready(function do_save() {
        $("#btnSubmit").click(function () {
            var myformdata = $("#Modal-lightbox").serialize();
            $ajax({
                type: "POST",
                url: "/Sistema/Estoque/Index",
                data: myformdata,
                success: function () {
                    $("#main").modal("#hide")
                }
            })
        })
    })

    var saveForm = function () {

    }
</script>-->

@section Scripts {
    @Scripts.Render("~/Scripts/jquery.validate.unobtrusive.js")
}